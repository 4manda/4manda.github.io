{"version":3,"sources":["components/NavBar/DropDown.js","components/NavBar/TopNav.js","components/NavBar/NavBar.js","components/Home.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["DropDown","_this","this","listItems","props","droplist","map","item","i","name","length","react_default","a","createElement","react_router_dom","key","to","onClick","toggleNavBar","className","toggleDrop","id","subcontent","React","Component","TopNav","navList","NavBar_DropDown","NavBar","drop","document","getElementById","classList","toggle","previousSibling","x","NavBar_TopNav","Home","About","App","components_NavBar_NavBar","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f3958eb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink as Link } from 'react-router-dom';\n\nclass DropDown extends React.Component {\n  render() {\n    const dropList = this.props.droplist;\n    const listItems = dropList.map((item, i) => {\n      const name = item[0];\n      if (item.length === 1) {\n      return <Link key={i} to={\"/\" + name} onClick={() => this.props.toggleNavBar()}>{name}</Link>\n      } else {\n        return (\n          <div key={i} className=\"dropdown\">\n            <a className=\"dropbtn\" onClick={() => this.props.toggleDrop(name)}>\n              {name}\n            </a>\n            <DropDown droplist={item[1]} name={name} toggleNavBar={() => this.props.toggleNavBar()} toggleDrop={(id) => this.props.toggleDrop(id)} subcontent={true} />\n          </div>\n        );\n      }\n    });\n    if (this.props.subcontent) {\n      return <div className=\"dropdown-content subcontent\" id={this.props.name}>{listItems}</div>\n    } else {\n      return <div className=\"dropdown-content\" id={this.props.name}>{listItems}</div>\n    }\n  }\n}\n\nDropDown.propTypes = {\n  droplist: PropTypes.array.isRequired,\n  subcontent: PropTypes.object,\n  name: PropTypes.string,\n  toggleNavBar: PropTypes.func.isRequired,\n  toggleDrop: PropTypes.func.isRequired,\n};\n\nexport default DropDown;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink as Link } from 'react-router-dom';\nimport DropDown from './DropDown';\n\nclass TopNav extends React.Component {\n  render() {\n    const listItems = this.props.navList.map((item, i) => {\n      const name = item[0];\n      if ( item.length === 1 ) {\n        return <li key={i}><Link to={\"/\" + name} onClick={() => this.props.toggleNavBar()}>{name}</Link></li>\n      } else {\n        return (\n          <li key={i} className=\"dropdown\">\n            <a className=\"dropbtn\" onClick={() => this.props.toggleDrop(name)}>\n              {name}\n            </a>\n            <DropDown droplist={item[1]} name={name} toggleNavBar={() => this.props.toggleNavBar()} toggleDrop={(id) => this.props.toggleDrop(id)} />\n          </li>\n        );\n      }\n    });\n    return (\n      <ul>\n        { listItems }\n        <li className=\"icon\"><a onClick={() => this.props.toggleNavBar()}>&#9776;</a></li>\n      </ul>\n    );\n  }\n}\n\nTopNav.propTypes = {\n  navList: PropTypes.array,\n  toggleDrop: PropTypes.func.isRequired,\n  toggleNavBar: PropTypes.func.isRequired,\n};\n\nexport default TopNav;\n","import React from 'react';\nimport '../../styles/navbar.css';\nimport TopNav from './TopNav';\n\nconst navList = [[\"home\"], [\"about\"]];\n\nclass NavBar extends React.Component {\n  toggleDrop(id) {\n    const drop = document.getElementById(id);\n    drop.classList.toggle(\"show\");\n    drop.previousSibling.classList.toggle(\"arrowdown\")\n  }\n\n  toggleNavBar() {\n    const x = document.getElementById(\"topnav\");\n    if (x.className === \"topnav\") {\n      x.className += \" responsive\";\n    } else {\n      x.className = \"topnav\";\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"topnav\" id=\"topnav\">\n        <TopNav navList={navList} toggleDrop={(id) => this.toggleDrop(id)} toggleNavBar={() => this.toggleNavBar()} />\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\n\nconst Home = () => (\n  <div className=\"home\">\n    <h1>Hello World</h1>\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\n\nconst About = (props) => (\n  <div className=\"about\">\n    <h2>Amanda Splink</h2>\n    <p>Hoping to share more about me soon.</p>\n  </div>\n);\n\nexport default About;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport NavBar from './components/NavBar/NavBar';\nimport Home from './components/Home';\nimport About from './components/About';\n\nconst App = props => {\n  return (\n    <Router>\n      <div>\n        <NavBar />\n        <div className=\"main\">\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/home\" component={Home} />\n          <Route path=\"/about\" component={About} />\n        </div>\n        {/* TODO: Add Footer */}\n      </div>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}